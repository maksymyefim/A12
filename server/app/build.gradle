import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.mgmtp.a12.A12AlignmentRule

plugins {
    id 'java'
    alias(gradlePluginLibs.plugins.spring.boot)
    alias(gradlePluginLibs.plugins.test.logger)
}

String serviceName = 'server'

dependencies {

    // Spring
    implementation libs.spring.boot.starter.web
    annotationProcessor libs.spring.boot.configuration.processor

    // Align A12 Versions
    components.all(A12AlignmentRule)

    // A12 UAA
    implementation a12Libs.uaa.authentication.user.extension.spring.boot.autoconfigure

    // A12 Dataservices
    implementation a12Libs.dataservices.server.app
    implementation libs.jaxws // Required in Java 11+

    implementation project(':server:common')

    // Virtual BOMs
    implementation(platform(a12Libs.base.bom))

    // Native BOMs
    implementation(platform(a12Libs.kernel.bom))
    implementation(platform(a12Libs.uaa.bom))
    implementation(platform(a12Libs.dataservices.bom))
}

springBoot {
    mainClass = 'com.mgmtp.a12.template.server.ProjectTemplateServerApplication'
    buildInfo {
        properties {
            version = rootProject.version
        }
    }
}

artifacts {
    archives bootJar
}

publishing {
    publications {
        serverBootJar(MavenPublication) {
            groupId = rootProject.group
            artifactId = serviceName
            version = rootProject.version

            artifact bootJar
        }
    }
}

// Docker builds
bootBuildImage {
    environment = ['BP_JVM_VERSION': '17.*']
    builder = "${dockerRegistryForRead}/paketobuildpacks/builder:base"
    runImage = "${dockerRegistryForRead}/paketobuildpacks/run:base-cnb"
    imageName = calculateFullTag(serviceName)
    if (dockerUseCredentials.toBoolean()) {
        docker {
            host = project.findProperty('dockerHost')
            builderRegistry {
                username = project.repository_username
                password = project.repository_password
                url = dockerRegistryForRead
            }
            publishRegistry {
                username = project.repository_username
                password = project.repository_password
                url = dockerRegistryForPublish
            }
        }
    }
}

tasks.register('buildImages') {
    group 'docker'
    bootBuildImage.publish = false
    dependsOn bootBuildImage
}

tasks.register('pushImages') {
    group 'docker'
    bootBuildImage.publish = true
    dependsOn bootBuildImage
}

tasks.register('removeTagFull', DockerRemoveImage) {
    group 'clean'
    targetImageId calculateFullTag(serviceName)
}

tasks.register('cleanImages') {
    group 'clean'
    dependsOn removeTagFull
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    alias(gradlePluginLibs.plugins.node.gradle)
}

String clientName = 'frontend'
String distDir = "$buildDir/dist/$version"

tasks.register('compile', NpmTask) {
    group 'build'
    dependsOn npmInstall
    finalizedBy test

    mkdir 'target'
    args = ['run-script', 'compile']
}

tasks.register('test', NpmTask) {
    group 'build'
    dependsOn { compile }
    args = ['test']
}

tasks.register('webpack', NpmTask) {
    group 'build'
    dependsOn { compile }

    args = ['run-script', 'webpack']
}

tasks.register('start', NpmTask) {
    args = ['run-script', 'start']
}

tasks.register('dist', Sync) {
    group 'build'
    dependsOn { webpack }

    from('target/webpack/')
    into distDir
}

clean.doFirst {
    delete 'target'
}

assemble.dependsOn compile

tasks.register('copyNginxConf', Sync) {
    group 'docker'

    from 'nginx.conf.template'
    from 'nginx.conf.k8s'
    into 'build'
}

tasks.register('dockerSrc', Sync) {
    group 'docker'
    dependsOn dist

    from distDir
    into 'build/docker'
}

tasks.register('createDockerfile', Dockerfile) {
    group 'docker'
    dependsOn dockerSrc, copyNginxConf

    destFile = file("$buildDir/Dockerfile")
    from "$dockerRegistryForRead/nginx"
    copyFile 'docker', '/usr/share/nginx/html'
    copyFile 'nginx.conf.k8s', '/etc/nginx/nginx.conf'
    copyFile 'nginx.conf.template', '/etc/nginx/nginx.conf.template'
    defaultCommand "/bin/sh\" , \"-c\" , \"([ -z \${NGINX_PROJECT_TEMPLATE_SERVER_BASE_URL} ] || envsubst '\${NGINX_PROJECT_TEMPLATE_SERVER_BASE_URL}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf) && cat /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
}

tasks.register('buildImages', DockerBuildImage) {
    group 'docker'
    dependsOn createDockerfile

    images.add(calculateFullTag(clientName))
    inputDir.set(file(buildDir))
    if (dockerUseCredentials.toBoolean()) {
        dockerRegistryCredentialsForRead
    }
}

tasks.register('pushImages', DockerPushImage) {
    group 'docker'
    dependsOn buildImages

    images.add(calculateFullTag(clientName))
}

tasks.register('removeTagFull', DockerRemoveImage) {
    group 'clean'
    targetImageId calculateFullTag(clientName)
}

tasks.register('cleanImages') {
    group 'clean'
    dependsOn removeTagFull
}
